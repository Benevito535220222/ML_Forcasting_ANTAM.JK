# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1my79GTWikmWNBfS1-kkW8nULMB03cDPt
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, GRU
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from tensorflow.keras.wrappers.scikit_learn import KerasRegressor
from sklearn.model_selection import RandomizedSearchCV

"""### EDA"""

# Import dataset
df = pd.read_csv("ANTM.JK.csv", parse_dates=["Date"])

# Sort tanggal
df.sort_values("Date", inplace=True)

# Info df
df.info()

# Value df
df.describe()

# Cek missing value
df.isnull().sum()

# Visualisasi harga close
plt.figure(figsize=(12, 6))
plt.plot(df["Date"], df["Close"], label="Harga Close", color="blue")
plt.title("Harga Close Seiring Waktu")
plt.xlabel("Tanggal")
plt.ylabel("Harga")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

# Distribusi harga close
plt.figure(figsize=(8, 4))
sns.histplot(df["Close"], bins=50, kde=True, color="skyblue")
plt.title("Distribusi Harga Close")
plt.xlabel("Harga Close")
plt.tight_layout()
plt.show()

# Heat map korelasi
plt.figure(figsize=(8, 6))
sns.heatmap(df[["Open", "High", "Low", "Close", "Adj Close", "Volume"]].corr(), annot=True, cmap="Blues")
plt.title("Matriks Korelasi Antar Fitur")
plt.show()

"""### Preprocessing"""

# Drop row yang kosong
df.dropna(inplace=True)

# Seleksi fitur
features = ["Open", "High", "Low", "Close", "Adj Close"]
data = df[features]

# Normalisasi data kuantitatif
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data)

# Fungsi sliding window
def window(data, window_size=60):
    X, y = [], []
    for i in range(window_size, len(data)):
        X.append(data[i - window_size:i])
        y.append(data[i][3])
    return np.array(X), np.array(y)

# Buat slidinng window
window_size = 60
X, y = window(scaled_data, window_size)

# Sesuaikan tanggal dengan data
dates = df["Date"][window_size:]
dates_train, dates_test = train_test_split(dates, test_size=0.2, shuffle=False)

# Bagi dataset menjadi test dan train
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

"""### Modeling

##### LSTM
"""

# Model LStM
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))
model.add(LSTM(units=50))
model.add(Dense(1))
model.compile(optimizer="adam", loss="mean_squared_error")

# latih model
history = model.fit(X_train, y_train, epochs=20, batch_size=32, validation_data=(X_test, y_test))

# Lakukan prediksi
predicted = model.predict(X_test)

# Inverse transform prediksi untuk dibandingkan
full_scaler = MinMaxScaler()
full_scaler.fit(data)

# Buat array untuk hasil prediksi
y_test_full = np.zeros((y_test.shape[0], data.shape[1]))
y_test_full[:, 1] = y_test

predicted_full = np.zeros((predicted.shape[0], data.shape[1]))
predicted_full[:, 1] = predicted.reshape(-1)

# Lakukan inverse transform
y_test_rescaled = full_scaler.inverse_transform(y_test_full)[:, 1]
predicted_rescaled = full_scaler.inverse_transform(predicted_full)[:, 1]

# Visualisasi
plt.figure(figsize=(12, 6))
plt.plot(dates_test, y_test_rescaled, color="blue", label="Harga Close Aktual")
plt.plot(dates_test, predicted_rescaled, color="red", label="Harga Close Prediksi")
plt.title("Harga Saham (ANTM.JK)")
plt.xlabel("Tanggal")
plt.ylabel("Harga")
plt.legend()
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
plt.gcf().autofmt_xdate()
plt.tight_layout()
plt.show()

# Evaluasi
lstm_mae = mean_absolute_error(y_test_rescaled, predicted_rescaled)
lstm_mse = mean_squared_error(y_test_rescaled, predicted_rescaled)
lstm_rmse = np.sqrt(lstm_mse)
lstm_r2 = r2_score(y_test_rescaled, predicted_rescaled)

"""##### GRU"""

# Model GRU
model = Sequential()
model.add(GRU(units=50, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))
model.add(GRU(units=50))
model.add(Dense(1))
model.compile(optimizer="adam", loss="mean_squared_error")

# Latih model
history = model.fit(X_train, y_train, epochs=20, batch_size=32, validation_data=(X_test, y_test))

# Lakukan prediksi
predicted = model.predict(X_test)

# Inverse transform prediksi untuk dibandingkan
full_scaler = MinMaxScaler()
full_scaler.fit(data)

# Buat array untuk hasil prediksi
y_test_full = np.zeros((y_test.shape[0], data.shape[1]))
y_test_full[:, 1] = y_test

predicted_full = np.zeros((predicted.shape[0], data.shape[1]))
predicted_full[:, 1] = predicted.reshape(-1)

# Lakukan inverse transform
y_test_rescaled = full_scaler.inverse_transform(y_test_full)[:, 1]
predicted_rescaled = full_scaler.inverse_transform(predicted_full)[:, 1]

# Visualisasi
plt.figure(figsize=(12, 6))
plt.plot(dates_test, y_test_rescaled, color="blue", label="Harga Close Aktual")
plt.plot(dates_test, predicted_rescaled, color="red", label="Harga Close Prediksi")
plt.title("Harga Saham (ANTM.JK)")
plt.xlabel("Tanggal")
plt.ylabel("Harga")
plt.legend()
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
plt.gcf().autofmt_xdate()
plt.tight_layout()
plt.show()

# Evaluasi
gru_mae = mean_absolute_error(y_test_rescaled, predicted_rescaled)
gru_mse = mean_squared_error(y_test_rescaled, predicted_rescaled)
gru_rmse = np.sqrt(gru_mse)
gru_r2 = r2_score(y_test_rescaled, predicted_rescaled)

"""#### Hyperparameter Tuning"""

# Model LSTM
def lstm_model(units=50, optimizer="adam"):
    model = Sequential()
    model.add(LSTM(units=units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))
    model.add(LSTM(units=units))
    model.add(Dense(1))
    model.compile(loss="mean_squared_error", optimizer=optimizer)
    return model

lstm_reg = KerasRegressor(build_fn=lstm_model, verbose=1)

# Model GRU
def gru_model(units=50, optimizer="adam"):
    model = Sequential()
    model.add(GRU(units=units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))
    model.add(GRU(units=units))
    model.add(Dense(1))
    model.compile(loss="mean_squared_error", optimizer=optimizer, metrics=["mae"])
    return model

gru_reg = KerasRegressor(build_fn=gru_model, verbose=1)

# Parameter untuk di lakukan tuning
param_grid = {
    "units": [32, 50, 64],
    "batch_size": [16, 32],
    "epochs": [10, 20],
    "optimizer": ["adam", "rmsprop"]
}

"""##### LSTM"""

# Random Search LSTM
random_search = RandomizedSearchCV(estimator=lstm_reg, param_distributions=param_grid, n_iter=5, cv=3, random_state=42)
random_search_result = random_search.fit(X_train, y_train)
print("Parameter terbaik dari Random Search:", random_search_result.best_params_)

# Simpan parameter terbaik
best_model = lstm_model(
    units=random_search_result.best_params_["units"],
    optimizer=random_search_result.best_params_["optimizer"],
)

# Latih model dengan parameter sebelumnya
history = best_model.fit(
    X_train, y_train,
    epochs=random_search_result.best_params_["epochs"],
    batch_size=random_search_result.best_params_["batch_size"],
    validation_data=(X_test, y_test)
)

# Lakukan prediksi
predicted = best_model.predict(X_test)

# Inverse transform prediksi untuk dibandingkan
full_scaler = MinMaxScaler()
full_scaler.fit(data)

# Buat array untuk hasil prediksi
y_test_full = np.zeros((y_test.shape[0], data.shape[1]))
y_test_full[:, 1] = y_test

predicted_full = np.zeros((predicted.shape[0], data.shape[1]))
predicted_full[:, 1] = predicted.reshape(-1)

# Lakukan inverse transform
y_test_rescaled = full_scaler.inverse_transform(y_test_full)[:, 1]
predicted_rescaled = full_scaler.inverse_transform(predicted_full)[:, 1]

# Visualisasi
plt.figure(figsize=(12, 6))
plt.plot(dates_test, y_test_rescaled, color="blue", label="Harga Close Aktual")
plt.plot(dates_test, predicted_rescaled, color="red", label="Harga Close Prediksi")
plt.title("Harga Saham (ANTM.JK)")
plt.xlabel("Tanggal")
plt.ylabel("Harga")
plt.legend()
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
plt.gcf().autofmt_xdate()
plt.tight_layout()
plt.show()

# Evaluasi
lstm_mae_rs = mean_absolute_error(y_test_rescaled, predicted_rescaled)
lstm_mse_rs = mean_squared_error(y_test_rescaled, predicted_rescaled)
lstm_rmse_rs = np.sqrt(lstm_mse_rs)
lstm_r2_rs = r2_score(y_test_rescaled, predicted_rescaled)

"""##### GRU"""

# Random Search GRU
random_search = RandomizedSearchCV(estimator=gru_reg, param_distributions=param_grid, n_iter=5, cv=3, random_state=42)
random_search_result = random_search.fit(X_train, y_train)
print("Parameter terbaik dari Random Search:", random_search_result.best_params_)

# Simpan parameter terbaik
best_model = gru_model(
    units=random_search_result.best_params_["units"],
    optimizer=random_search_result.best_params_["optimizer"]
)

# Latih model dengan parameter sebelumnya
history = best_model.fit(
    X_train, y_train,
    epochs=random_search_result.best_params_["epochs"],
    batch_size=random_search_result.best_params_["batch_size"],
    validation_data=(X_test, y_test)
)

# Lakukan prediksi
predicted = best_model.predict(X_test)

# Inverse transform prediksi untuk dibandingkan
full_scaler = MinMaxScaler()
full_scaler.fit(data)

# Buat array untuk hasil prediksi
y_test_full = np.zeros((y_test.shape[0], data.shape[1]))
y_test_full[:, 1] = y_test

predicted_full = np.zeros((predicted.shape[0], data.shape[1]))
predicted_full[:, 1] = predicted.reshape(-1)

# Lakukan inverse transform
y_test_rescaled = full_scaler.inverse_transform(y_test_full)[:, 1]
predicted_rescaled = full_scaler.inverse_transform(predicted_full)[:, 1]

# Visualisasi
plt.figure(figsize=(12, 6))
plt.plot(dates_test, y_test_rescaled, color="blue", label="Harga Close Aktual")
plt.plot(dates_test, predicted_rescaled, color="red", label="Harga Close Prediksi")
plt.title("Harga Saham (ANTM.JK)")
plt.xlabel("Tanggal")
plt.ylabel("Harga")
plt.legend()
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
plt.gcf().autofmt_xdate()
plt.tight_layout()
plt.show()

# Evaluasi
gru_mae_rs = mean_absolute_error(y_test_rescaled, predicted_rescaled)
gru_mse_rs = mean_squared_error(y_test_rescaled, predicted_rescaled)
gru_rmse_rs = np.sqrt(gru_mse_rs)
gru_r2_rs = r2_score(y_test_rescaled, predicted_rescaled)

"""### Evaluasi"""

# Print hasil evaluasi semuanya
print("Evaluasi LSTM:")
print(f"Mean Absolute Error (MAE): {lstm_mae:.2f}")
print(f"Mean Squared Error (MSE): {lstm_mse:.2f}")
print(f"Root Mean Squared Error (RMSE): {lstm_rmse:.2f}")
print(f"R2 Score: {lstm_r2:.4f}")

print("\nEvaluasi LSTM (Random Search):")
print(f"Mean Absolute Error (MAE): {lstm_mae_rs:.2f}")
print(f"Mean Squared Error (MSE): {lstm_mse_rs:.2f}")
print(f"Root Mean Squared Error (RMSE): {lstm_rmse_rs:.2f}")
print(f"R2 Score: {lstm_r2_rs:.4f}")

print("\nEvaluasi GRU:")
print(f"Mean Absolute Error (MAE): {gru_mae:.2f}")
print(f"Mean Squared Error (MSE): {gru_mse:.2f}")
print(f"Root Mean Squared Error (RMSE): {gru_rmse:.2f}")
print(f"R2 Score: {gru_r2:.4f}")

print("\nEvaluasi GRU (Random Search):")
print(f"Mean Absolute Error (MAE): {gru_mae_rs:.2f}")
print(f"Mean Squared Error (MSE): {gru_mse_rs:.2f}")
print(f"Root Mean Squared Error (RMSE): {gru_rmse_rs:.2f}")
print(f"R2 Score: {gru_r2_rs:.4f}")